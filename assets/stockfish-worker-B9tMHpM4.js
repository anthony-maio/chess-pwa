(function(){"use strict";console.log("Stockfish worker script loaded");var s=typeof WebAssembly=="object"&&WebAssembly.validate(Uint8Array.of(0,97,115,109,1,0,0,0));let i="/";self.onmessage=e=>{const o=e.data;switch(o.type){case"init":i=o.baseUrl,i.endsWith("/")||(i+="/"),console.log("Stockfish worker initializing with baseUrl:",i),c(i);break;case"setoption":self.Stockfish&&typeof self.Stockfish=="function"?self.Stockfish().postMessage(`setoption name ${o.name} value ${o.value}`):console.warn("Stockfish not yet initialized, skipping setoption command.");break;case"position":self.Stockfish&&typeof self.Stockfish=="function"?self.Stockfish().postMessage(`position fen ${o.fen}`):console.warn("Stockfish not yet initialized, skipping position command.");break;case"go":self.Stockfish&&typeof self.Stockfish=="function"?self.Stockfish().postMessage(o.command):console.warn("Stockfish not yet initialized, skipping go command.");break;default:console.debug("Worker received unhandled message:",o)}};async function c(e){self.Module={locateFile:function(o,t){if(o.endsWith(".wasm")){console.log(`Worker: Locating WASM file: ${o} with baseUrl: ${e}`);const n=`${e}stockfish/${o}`;return console.log(`Worker: Full WASM path: ${n}`),n}return console.log(`Worker: Locating file: ${o} with prefix: ${t}`),t+o},onRuntimeInitialized:function(){console.log("Stockfish runtime initialized."),setTimeout(()=>{if(self.Stockfish&&typeof self.Stockfish=="function")console.log("Stockfish function is available. Posting ready message."),self.postMessage({type:"ready"});else throw console.error("Stockfish function not available after initialization"),new Error("Stockfish function not available after initialization")},100)},print:function(o){console.log("Stockfish stdout:",o)},printErr:function(o){console.error("Stockfish stderr:",o)},setStatus:function(o){console.log("Stockfish status:",o)}};try{const o=s?`${e}stockfish/stockfish.wasm.js`:`${e}stockfish/stockfish.js`;console.log(`Worker: Attempting to load ${o} WASM: ${s}`),console.log(`Worker: baseUrl is: "${e}"`);const t=await fetch(o);if(!t.ok)throw new Error(`Failed to fetch Stockfish script: ${t.status} ${t.statusText} for URL: ${o}`);importScripts(o)}catch(o){console.error("Worker: Error during Stockfish script import or initialization.",o),self.postMessage({type:"error",message:`Failed to initialize Stockfish: ${o.message}`})}}})();
