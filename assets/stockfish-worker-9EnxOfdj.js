(function(){"use strict";console.log("Stockfish worker script loaded");var a=typeof WebAssembly=="object"&&WebAssembly.validate(Uint8Array.of(0,97,115,109,1,0,0,0));let t="/",s=null;self.onmessage=i=>{const e=i.data;if(typeof e=="string"){s&&s.postMessage(e);return}switch(e.type){case"init":t=e.baseUrl,t.endsWith("/")||(t+="/"),console.log("Stockfish worker initializing with baseUrl:",t),c(t);break;case"setoption":if(s){const o=`setoption name ${e.name} value ${e.value}`;console.log(`Worker: Sending command: ${o}`),s.postMessage(o)}break;case"position":if(s){const o=`position fen ${e.fen}`;console.log(`Worker: Sending command: ${o}`),s.postMessage(o)}break;case"go":s&&(console.log(`Worker: Sending command: ${e.command}`),s.postMessage(e.command));break;default:console.debug("Worker received unhandled message:",e)}};async function c(i){try{const e=a?`${i}stockfish/stockfish.wasm.js`:`${i}stockfish/stockfish.js`;console.log(`Worker: Creating Stockfish worker with script: ${e}`);const o=await fetch(e);if(!o.ok)throw new Error(`Failed to fetch Stockfish script: ${o.status} ${o.statusText} for URL: ${e}`);s=new Worker(e),s.onmessage=function(r){console.log("Stockfish output:",r.data),self.postMessage(r.data)},s.onerror=function(r){console.error("Stockfish worker error:",r),self.postMessage({type:"error",message:`Stockfish worker error: ${r.message}`})},s.postMessage("uci"),console.log("Stockfish worker created successfully"),self.postMessage({type:"ready"})}catch(e){console.error("Worker: Error during Stockfish worker creation.",e),self.postMessage({type:"error",message:`Failed to initialize Stockfish: ${e.message}`})}}})();
